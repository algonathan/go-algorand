// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
